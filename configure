#!/bin/sh
#
# Configure script for 'mdp'
# Copyright (c) 2012-2020 Bertrand Janin <b@janin.com>
#
#

PROG="mdp"
MDP_VERSION="0.7.5"


# Some shells have shitty echos
alias echo=/bin/echo


# generate_makefile() - Generate the main Makefile
# $1 - source makefile, appended at the end
generate_makefile() {
	echo "# Automagically generated by 'configure'"
	echo

	echo "PROG=$PROG"
	echo "CFLAGS+=$CFLAGS -std=c99 -pedantic"
	echo "CFLAGS+=-Wall -W -Wpointer-arith -Wbad-function-cast -Wcast-qual"
	echo "CFLAGS+=-Wstrict-prototypes -Wmissing-prototypes"
	echo "CFLAGS+=-Wmissing-declarations -Wnested-externs -Winline"
	echo "CFLAGS+=-DMDP_VERSION=\\\"$MDP_VERSION\\\" $X_CFLAGS"

	if [ "$DEBUG_MODE" = "Y" ]; then
		echo "CFLAGS+=-ggdb -O0"
	else
		echo "CFLAGS+=-O2"
	fi

	if [ -n "$X_OBJECTS" ]; then
		echo "EXTRA_OBJECTS=$X_OBJECTS"
	fi

	echo "CC?=$CC"
	echo "PREFIX?=$PREFIX"
	echo "MANDEST=$MANDEST"
	echo "CURSESLIB=$CURSESLIB"

	cat "$1"
}


# usage() - Spit out basic help
usage() {
	echo "usage: ./configure [-hd] [--prefix path] [platform]"
	echo
	echo "    -h              this help screen."
	echo "    -d              configure for debug mode (-ggdb -O0)"
	echo "    --prefix path   base path for installation"
	echo
	exit
}


# stuff_not_found() - Exit 'cause we're missing something
stuff_not_found() {
	message="$1"
	echo "not found"
	echo
	echo ERROR: $message
	exit 2
}


# Command-line arguments
while true; do
	case "$1" in
		-h|--help)
			usage
			exit 2
			;;

		-d|--debug)
			echo "Debug mode... enabled"
			DEBUG_MODE="Y"
			shift
			;;

		--prefix=*)
			PREFIX="${1##--prefix=}"
			shift
			;;

		# Skip all random long opts passed by packagers thinking this
		# is autoconf-compatible.
		--*)
			shift
			;;

		*)
			break
			;;
	esac
done


# Detect platform
echo -n "Target platform... "
OS=`uname`
if [ -n "$1" ]; then
	OS="$1"
fi
echo $OS


# Platform-specific configuration
case $OS in
	Linux|Unix|POSIX)
		X_CFLAGS="-D_GNU_SOURCE"
		MANDEST="share/man"
		;;

	NetBSD)
		CURSESLIB="-lcurses"
		;;

	Darwin)
		MANDEST="share/man"
		CURSESLIB="-lncurses"
		;;
esac


# Default paths
[ -z "$CURSESLIB" ]	&& CURSESLIB="-lncursesw"
[ -z "$PREFIX" ]	&& PREFIX="/usr/local"
[ -z "$MANDEST" ]	&& MANDEST="man"


# Check for make
echo -n "make... "
cat <<EOF > fake_makefile
all:
	@echo found
EOF
if ! make -f fake_makefile 1>/dev/null 2>/dev/null; then
	stuff_not_found "Make not found (try to install make or gmake)"
fi
echo found
rm -f fake_makefile*


# Check if we have a working cc
if [ -z "$CC" ]; then
	if cc -v 1>/dev/null 2>/dev/null; then
		export CC=cc
	elif gcc -v 1>/dev/null 2>/dev/null; then
		export CC=gcc
	else
		stuff_not_found "No C compiler found (try to install clang or gcc)"
	fi
fi

echo -n "cc... "
cat <<EOF > fake_cc.c
#include <stdio.h>
main() { printf("woot\n"); }
EOF
if ! ${CC} fake_cc.c -o /dev/null 1>/dev/null 2>/dev/null; then
	stuff_not_found "Detected compiler (${CC}) is not working"
fi
echo ${CC}
rm -f fake_cc*


# Check if we have strlcpy
echo -n "strlcpy... "
cat <<EOF > fake_strlcpy.c
#include <string.h>
main() { char buf[32]; strlcpy(buf, "woot", sizeof(buf)); }
EOF
if ! ${CC} fake_strlcpy.c -o /dev/null 1>/dev/null 2>/dev/null; then
	echo "not found (we'll use ours)"
	X_OBJECTS="$X_OBJECTS strlcpy.o"
	CFLAGS="$CFLAGS -DHAS_NO_STRLCPY"
else
	echo yes
fi
rm -f fake_strlcpy*


# Check if we have strlcat
echo -n "strlcat... "
cat <<EOF > fake_strlcat.c
#include <string.h>
main() { char buf[32]; buf[0] = '\0'; strlcat(buf, "woot", sizeof(buf)); }
EOF
if ! ${CC} fake_strlcat.c -o /dev/null 1>/dev/null 2>/dev/null; then
	echo "not found (we'll use ours)"
	X_OBJECTS="$X_OBJECTS strlcat.o"
	CFLAGS="$CFLAGS -DHAS_NO_STRLCAT"
else
	echo yes
fi
rm -f fake_strlcat*


# Check if we have wcslcpy
echo -n "wcslcpy... "
cat <<EOF > fake_wcslcpy.c
#include <wchar.h>
main() { wchar_t buf[32]; wcslcpy(buf, L"woot", sizeof(buf)); }
EOF
if ! ${CC} fake_wcslcpy.c -o /dev/null 1>/dev/null 2>/dev/null; then
	echo "not found (we'll use ours)"
	X_OBJECTS="$X_OBJECTS wcslcpy.o"
	CFLAGS="$CFLAGS -DHAS_NO_WCSLCPY"
else
	echo yes
fi
rm -f fake_wcslcpy*


# Check if we have wcsncasecmp
echo -n "wcsncasecmp... "
cat <<EOF > fake_wcsncasecmp.c
#include <wchar.h>
main() { int same; same = wcsncasecmp(L"foo", L"bar", sizeof L"foo"); }
EOF
if ! ${CC} fake_wcsncasecmp.c -o /dev/null 1>/dev/null 2>/dev/null; then
	echo "not found (we'll use ours)"
	X_OBJECTS="$X_OBJECTS wcsncasecmp.o"
	CFLAGS="$CFLAGS -DHAS_NO_WCSNCASECMP"
#endif

else
	echo yes
fi
rm -f fake_wcsncasecmp*


# Check if we have wcsdup
echo -n "wcsdup... "
cat <<EOF > fake_wcsdup.c
#include <wchar.h>
main() { wchar_t *str; str = wcsdup(L"woot"); }
EOF
if ! ${CC} fake_wcsdup.c -o /dev/null 1>/dev/null 2>/dev/null; then
	echo "not found (we'll use ours)"
	X_OBJECTS="$X_OBJECTS wcsdup.o"
	CFLAGS="$CFLAGS -DHAS_NO_WCSDUP"
else
	echo yes
fi
rm -f fake_wcsdup*


# Check if we have arc4random_uniform
echo -n "arc4random_uniform... "
cat <<EOF > fake_arc4random_uniform.c
#include <stdlib.h>
main() { u_int32_t weight = arc4random_uniform(20000); }
EOF
if ! ${CC} fake_arc4random_uniform.c -o /dev/null 1>/dev/null 2>/dev/null; then
	echo "not found (we'll use ours)"
	X_OBJECTS="$X_OBJECTS arc4random.o"
	CFLAGS="$CFLAGS -DHAS_NO_ARC4RANDOM_UNIFORM"
else
	echo yes
fi
rm -f fake_arc4random_uniform*


# Check for curses
echo -n "curses... "
cat <<EOF > fake_curses.c
#include <curses.h>
main() { initscr(); }
EOF
if ! ${CC} fake_curses.c -o /dev/null ${CURSESLIB} 1>/dev/null 2>/dev/null; then
	stuff_not_found "Can't compile with curses (missing headers or library)"
fi
echo "found (${CURSESLIB})"
rm -f fake_curses*

echo
find . -name "Makefile.src" | while read input; do
	output=${input%%.src}
	echo "generating $output"
	generate_makefile $input > $output
done

echo
echo "Run 'make' (or 'gmake') to compile and 'sudo make install' to install."
